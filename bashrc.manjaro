# vim: ft=sh:
#
# references:
# http://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# http://ss64.com/osx/
# http://gnu.org/software/bash/manual/bashref.html#Bash-Conditional-Expressions
#

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# editor settings
export EDITOR=nvim
export VIM_APP_DIR=~/Code

export PATH="$HOME/.local/bin:$PATH"

# bash-completion
if [ -r /usr/share/bash-completion/bash_completion ]; then
  source /usr/share/bash-completion/bash_completion
fi

# git prompt
if [ -r /usr/share/git/completion/git-prompt.sh ]; then
  source /usr/share/git/completion/git-prompt.sh
  export GIT_PS1_SHOWUPSTREAM="auto"
fi

# snap set up
export PATH="/snap/bin:$PATH"

# asdf-vm
ASDF_SCRIPT=/opt/asdf-vm/asdf.sh
if [ -f $ASDF_SCRIPT ]; then
  source $ASDF_SCRIPT
fi

# ASDF_COMPLETION=$HOME/.asdf/completions/asdf.bash
# if [ -f $ASDF_COMPLETION ]; then
#   source $ASDF_COMPLETION
# fi

# use most as pager if present
# if [ -x /usr/bin/most ]; then
#   export PAGER=most
# fi

# rust setup
# if [ -d $HOME/.cargo/bin ]; then
#   export PATH="$HOME/.cargo/bin:$PATH"
# fi

# haskell setup
if [ -f "/home/lsdr/.ghcup/env" ]; then
  source "/home/lsdr/.ghcup/env"
fi

# amazon web services
# if [ -e /usr/local/bin/aws ]; then
#   # aws-cli autocomplete
#   complete -C aws_completer aws
# fi

HISTCONTROL=ignoredups
HISTCONTROL=ignoreboth

# git prompt pimpin'
GIT_PS1_SHOWDIRTYSTATE=true

# bash options
shopt -s checkwinsize
shopt -s cdspell
shopt -s globstar
shopt -s nocaseglob
shopt -s extglob
shopt -s autocd
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=5000
HISTFILESIZE=10000

# mail behave
shopt -u mailwarn
unset MAILCHECK

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# tilix support
if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
  source /etc/profile.d/vte.sh
fi

# "private" helper functions
function __basedir {
  basename `pwd`
}

function __highlight_ps1 {
  hostname -s | tr '[:upper:]' '[:lower:]'
}

function __setup_prompt {
  history -a
  history -c
  history -r

  local NO_COLOR="\[\e[0m\]"
  local RED="\[\033[0;31m\]"
  local LIGHT_RED="\[\033[1;31m\]"
  local GREEN="\[\033[0;32m\]"
  local LIGHT_GREEN="\[\033[1;32m\]"
  local ORANGE="\[\033[0;33m\]"
  local YELLOW="\[\033[1;33m\]"
  local BLUE="\[\033[0;34m\]"
  local LIGHT_BLUE="\[\033[1;34m\]"
  local PURPLE="\[\033[1;35m\]"
  local MAGENTA="\[\033[1;35m\]"
  local CYAN="\[\033[1;36m\]"
  local LIGHT_CYAN="\[\033[1;36m\]"
  local GRAY="\[\033[1;30m\]"
  local LIGHT_GRAY="\[\033[0;37m\]"
  local WHITE="\[\033[1;37m\]"

  local HOST_PROMPT="${NO_COLOR}${CYAN}[$(__highlight_ps1)]${NO_COLOR} "
  local PATH_PROMPT="${NO_COLOR}${PWD/#$HOME/~}${NO_COLOR}"
  local GIT_PROMPT="${NO_COLOR}${MAGENTA}$(__git_ps1)${NO_COLOR}"

  # setting the bash PS1 prompt to my liking
  # example: export PS1="\u@\h: \W \$ "
  PS1="\n${HOST_PROMPT}${PATH_PROMPT}${GIT_PROMPT}\n\$ "
}

PROMPT_COMMAND=__setup_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# load aliases
if [ -f ~/.bash_aliases ]; then
    source ~/.bash_aliases
fi

